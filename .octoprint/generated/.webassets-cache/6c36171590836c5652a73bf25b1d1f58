V$(function() {\u000a    function TimelapseViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.loginState = parameters[0];\u000a\u000a        self.timelapsePopup = undefined;\u000a\u000a        self.defaultFps = 25;\u000a        self.defaultPostRoll = 0;\u000a        self.defaultInterval = 10;\u000a\u000a        self.timelapseType = ko.observable(undefined);\u000a        self.timelapseTimedInterval = ko.observable(self.defaultInterval);\u000a        self.timelapsePostRoll = ko.observable(self.defaultPostRoll);\u000a        self.timelapseFps = ko.observable(self.defaultFps);\u000a\u000a        self.persist = ko.observable(false);\u000a        self.isDirty = ko.observable(false);\u000a\u000a        self.isErrorOrClosed = ko.observable(undefined);\u000a        self.isOperational = ko.observable(undefined);\u000a        self.isPrinting = ko.observable(undefined);\u000a        self.isPaused = ko.observable(undefined);\u000a        self.isError = ko.observable(undefined);\u000a        self.isReady = ko.observable(undefined);\u000a        self.isLoading = ko.observable(undefined);\u000a\u000a        self.isBusy = ko.pureComputed(function() {\u000a            return self.isPrinting() || self.isPaused();\u000a        });\u000a\u000a        self.timelapseTypeSelected = ko.pureComputed(function() {\u000a            return ("off" != self.timelapseType());\u000a        });\u000a        self.intervalInputEnabled = ko.pureComputed(function() {\u000a            return ("timed" == self.timelapseType());\u000a        });\u000a        self.saveButtonEnabled = ko.pureComputed(function() {\u000a            return self.isDirty() && self.isOperational() && !self.isPrinting() && self.loginState.isUser();\u000a        });\u000a\u000a        self.isOperational.subscribe(function(newValue) {\u000a            self.requestData();\u000a        });\u000a\u000a        self.timelapseType.subscribe(function(newValue) {\u000a            self.isDirty(true);\u000a        });\u000a        self.timelapseTimedInterval.subscribe(function(newValue) {\u000a            self.isDirty(true);\u000a        });\u000a        self.timelapsePostRoll.subscribe(function(newValue) {\u000a            self.isDirty(true);\u000a        });\u000a        self.timelapseFps.subscribe(function(newValue) {\u000a            self.isDirty(true);\u000a        });\u000a\u000a        // initialize list helper\u000a        self.listHelper = new ItemListHelper(\u000a            "timelapseFiles",\u000a            {\u000a                "name": function(a, b) {\u000a                    // sorts ascending\u000a                    if (a["name"].toLocaleLowerCase() < b["name"].toLocaleLowerCase()) return -1;\u000a                    if (a["name"].toLocaleLowerCase() > b["name"].toLocaleLowerCase()) return 1;\u000a                    return 0;\u000a                },\u000a                "creation": function(a, b) {\u000a                    // sorts descending\u000a                    if (a["date"] > b["date"]) return -1;\u000a                    if (a["date"] < b["date"]) return 1;\u000a                    return 0;\u000a                },\u000a                "size": function(a, b) {\u000a                    // sorts descending\u000a                    if (a["bytes"] > b["bytes"]) return -1;\u000a                    if (a["bytes"] < b["bytes"]) return 1;\u000a                    return 0;\u000a                }\u000a            },\u000a            {\u000a            },\u000a            "name",\u000a            [],\u000a            [],\u000a            CONFIG_TIMELAPSEFILESPERPAGE\u000a        );\u000a\u000a        // initialize list helper for unrendered timelapses\u000a        self.unrenderedListHelper = new ItemListHelper(\u000a            "unrenderedTimelapseFiles",\u000a            {\u000a                "name": function(a, b) {\u000a                    // sorts ascending\u000a                    if (a["name"].toLocaleLowerCase() < b["name"].toLocaleLowerCase()) return -1;\u000a                    if (a["name"].toLocaleLowerCase() > b["name"].toLocaleLowerCase()) return 1;\u000a                    return 0;\u000a                },\u000a                "creation": function(a, b) {\u000a                    // sorts descending\u000a                    if (a["date"] > b["date"]) return -1;\u000a                    if (a["date"] < b["date"]) return 1;\u000a                    return 0;\u000a                },\u000a                "size": function(a, b) {\u000a                    // sorts descending\u000a                    if (a["bytes"] > b["bytes"]) return -1;\u000a                    if (a["bytes"] < b["bytes"]) return 1;\u000a                    return 0;\u000a                }\u000a            },\u000a            {\u000a            },\u000a            "name",\u000a            [],\u000a            [],\u000a            CONFIG_TIMELAPSEFILESPERPAGE\u000a        );\u000a\u000a        self.requestData = function() {\u000a            $.ajax({\u000a                url: API_BASEURL + "timelapse?unrendered=true",\u000a                type: "GET",\u000a                dataType: "json",\u000a                success: self.fromResponse\u000a            });\u000a        };\u000a\u000a        self.fromResponse = function(response) {\u000a            var config = response.config;\u000a            if (config === undefined) return;\u000a\u000a            self.timelapseType(config.type);\u000a            self.listHelper.updateItems(response.files);\u000a            if (response.unrendered) {\u000a                self.unrenderedListHelper.updateItems(response.unrendered);\u000a            }\u000a\u000a            if (config.type == "timed") {\u000a                if (config.interval != undefined && config.interval > 0) {\u000a                    self.timelapseTimedInterval(config.interval);\u000a                }\u000a            } else {\u000a                self.timelapseTimedInterval(self.defaultInterval);\u000a            }\u000a\u000a            if (config.postRoll != undefined && config.postRoll >= 0) {\u000a                self.timelapsePostRoll(config.postRoll);\u000a            } else {\u000a                self.timelapsePostRoll(self.defaultPostRoll);\u000a            }\u000a\u000a            if (config.fps != undefined && config.fps > 0) {\u000a                self.timelapseFps(config.fps);\u000a            } else {\u000a                self.timelapseFps(self.defaultFps);\u000a            }\u000a\u000a            self.persist(false);\u000a            self.isDirty(false);\u000a        };\u000a\u000a        self.fromCurrentData = function(data) {\u000a            self._processStateData(data.state);\u000a        };\u000a\u000a        self.fromHistoryData = function(data) {\u000a            self._processStateData(data.state);\u000a        };\u000a\u000a        self._processStateData = function(data) {\u000a            self.isErrorOrClosed(data.flags.closedOrError);\u000a            self.isOperational(data.flags.operational);\u000a            self.isPaused(data.flags.paused);\u000a            self.isPrinting(data.flags.printing);\u000a            self.isError(data.flags.error);\u000a            self.isReady(data.flags.ready);\u000a            self.isLoading(data.flags.loading);\u000a        };\u000a\u000a        self.removeFile = function(filename) {\u000a            $.ajax({\u000a                url: API_BASEURL + "timelapse/" + filename,\u000a                type: "DELETE",\u000a                dataType: "json",\u000a                success: self.requestData\u000a            });\u000a        };\u000a\u000a        self.removeUnrendered = function(name) {\u000a            $.ajax({\u000a                url: API_BASEURL + "timelapse/unrendered/" + name,\u000a                type: "DELETE",\u000a                dataType: "json",\u000a                success: self.requestData\u000a            });\u000a        };\u000a\u000a        self.renderUnrendered = function(name) {\u000a            $.ajax({\u000a                url: API_BASEURL + "timelapse/unrendered/" + name,\u000a                type: "POST",\u000a                dataType: "json",\u000a                contentType: "application/json; charset=UTF-8",\u000a                data: JSON.stringify({command: "render"})\u000a            });\u000a        };\u000a\u000a        self.save = function(data, event) {\u000a            var payload = {\u000a                "type": self.timelapseType(),\u000a                "postRoll": self.timelapsePostRoll(),\u000a                "fps": self.timelapseFps(),\u000a                "save": self.persist()\u000a            };\u000a\u000a            if (self.timelapseType() == "timed") {\u000a                payload["interval"] = self.timelapseTimedInterval();\u000a            }\u000a\u000a            $.ajax({\u000a                url: API_BASEURL + "timelapse",\u000a                type: "POST",\u000a                dataType: "json",\u000a                data: payload,\u000a                success: self.fromResponse\u000a            });\u000a        };\u000a\u000a        self.displayTimelapsePopup = function(options) {\u000a            if (self.timelapsePopup !== undefined) {\u000a                self.timelapsePopup.remove();\u000a            }\u000a\u000a            _.extend(options, {\u000a                callbacks: {\u000a                    before_close: function(notice) {\u000a                        if (self.timelapsePopup == notice) {\u000a                            self.timelapsePopup = undefined;\u000a                        }\u000a                    }\u000a                }\u000a            });\u000a\u000a            self.timelapsePopup = new PNotify(options);\u000a        };\u000a\u000a        self.onDataUpdaterReconnect = function() {\u000a            self.requestData();\u000a        };\u000a\u000a        self.onEventPostRollStart = function(payload) {\u000a            var title = gettext("Capturing timelapse postroll");\u000a\u000a            var text;\u000a            if (!payload.postroll_duration) {\u000a                text = _.sprintf(gettext("Now capturing timelapse post roll, this will take only a moment..."), format);\u000a            } else {\u000a                var format = {\u000a                    time: moment().add(payload.postroll_duration, "s").format("LT")\u000a                };\u000a\u000a                if (payload.postroll_duration > 60) {\u000a                    format.duration = _.sprintf(gettext("%(minutes)d min"), {minutes: payload.postroll_duration / 60});\u000a                    text = _.sprintf(gettext("Now capturing timelapse post roll, this will take approximately %(duration)s (so until %(time)s)..."), format);\u000a                } else {\u000a                    format.duration = _.sprintf(gettext("%(seconds)d sec"), {seconds: payload.postroll_duration});\u000a                    text = _.sprintf(gettext("Now capturing timelapse post roll, this will take approximately %(duration)s..."), format);\u000a                }\u000a            }\u000a\u000a            self.displayTimelapsePopup({\u000a                title: title,\u000a                text: text,\u000a                hide: false\u000a            });\u000a        };\u000a\u000a        self.onEventMovieRendering = function(payload) {\u000a            self.displayTimelapsePopup({\u000a                title: gettext("Rendering timelapse"),\u000a                text: _.sprintf(gettext("Now rendering timelapse %(movie_prefix)s. Due to performance reasons it is not recommended to start a print job while a movie is still rendering."), payload),\u000a                hide: false\u000a            });\u000a        };\u000a\u000a        self.onEventMovieFailed = function(payload) {\u000a            var html = "<p>" + _.sprintf(gettext("Rendering of timelapse %(movie_prefix)s failed with return code %(returncode)s"), payload) + "</p>";\u000a            html += pnotifyAdditionalInfo('<pre style="overflow: auto">' + payload.error + '</pre>');\u000a\u000a            self.displayTimelapsePopup({\u000a                title: gettext("Rendering failed"),\u000a                text: html,\u000a                type: "error",\u000a                hide: false\u000a            });\u000a        };\u000a\u000a        self.onEventMovieDone = function(payload) {\u000a            self.displayTimelapsePopup({\u000a                title: gettext("Timelapse ready"),\u000a                text: _.sprintf(gettext("New timelapse %(movie_prefix)s is done rendering."), payload),\u000a                type: "success",\u000a                callbacks: {\u000a                    before_close: function(notice) {\u000a                        if (self.timelapsePopup == notice) {\u000a                            self.timelapsePopup = undefined;\u000a                        }\u000a                    }\u000a                }\u000a            });\u000a            self.requestData();\u000a        };\u000a\u000a        self.onStartup = function() {\u000a            self.requestData();\u000a        };\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push([\u000a        TimelapseViewModel,\u000a        ["loginStateViewModel"],\u000a        "#timelapse"\u000a    ]);\u000a});\u000a\u000a;\u000a
p0
.