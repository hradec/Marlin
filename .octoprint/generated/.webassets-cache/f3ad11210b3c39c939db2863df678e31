V$(function() {\u000a    function YamlPatcherViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.settingsViewModel = parameters[0];\u000a\u000a        self.diffView = undefined;\u000a\u000a        self.patch = ko.observable();\u000a        self.diff = ko.observableArray([{"text": "Preview...", "css": "separator"}]);\u000a\u000a        self.patchJson = ko.observable();\u000a        self.toBeApplied = ko.observable();\u000a\u000a        self.invalidInput = ko.observable(false);\u000a\u000a        self.previewing = ko.observable(false);\u000a        self.applying = ko.observable(false);\u000a\u000a        self.patch.subscribe(function(newValue) {\u000a            self.toBeApplied(undefined);\u000a            self.patchJson(undefined);\u000a            self.invalidInput(false);\u000a\u000a            if (!newValue) {\u000a                return;\u000a            }\u000a\u000a            if (self._parseAsYamlpatch(newValue)) {\u000a                return;\u000a            }\u000a            log.debug("Input is not a valid Yamlpatcher patch, trying to parse as YAML");\u000a\u000a            if (self._parseAsYaml(newValue)) {\u000a                return;\u000a            }\u000a            log.debug("Input is not valid YAML either");\u000a            self.invalidInput(true);\u000a        });\u000a\u000a        self._parseAsYamlpatch = function(data) {\u000a            try {\u000a                var patch = JSON.parse(data);\u000a                if (self._validateYamlPatch(patch)) {\u000a                    self.patchJson(patch);\u000a                    self.invalidInput(false);\u000a                    return true;\u000a                }\u000a            } catch (e) {\u000a            }\u000a\u000a            return false;\u000a        };\u000a\u000a        self._parseAsYaml = function(data) {\u000a            try {\u000a                var lines = data.split("\u005cn");\u000a                lines = _.filter(lines, function(line) {\u000a                    return line.trim() != "...";\u000a                });\u000a\u000a                var node = jsyaml.load(lines.join("\u005cn"));\u000a\u000a                if (!_.isPlainObject(node)) {\u000a                    return false;\u000a                }\u000a\u000a                var keys = _.keys(node);\u000a                var path = [];\u000a\u000a                while (_.isPlainObject(node) && keys.length == 1) {\u000a                    path.push(keys[0]);\u000a                    node = node[keys[0]];\u000a                    keys = _.keys(node);\u000a                }\u000a\u000a                if (path.length == 0 && !_.isPlainObject(node)) {\u000a                    return false;\u000a                }\u000a\u000a                var nodes = [];\u000a                if (path.length == 0) {\u000a                    _.each(keys, function(key) {\u000a                        nodes.push([[key], node[key]]);\u000a                    });\u000a                } else {\u000a                    nodes.push([path, node]);\u000a                }\u000a\u000a                var patch = [];\u000a                _.each(nodes, function(entry) {\u000a                    var p = entry[0];\u000a                    var n = entry[1];\u000a\u000a                    if (_.isPlainObject(n)) {\u000a                        patch.push(["merge", p.join("."), n]);\u000a                    } else if (_.isArray(n)) {\u000a                        patch.push(["append", p.join("."), n]);\u000a                    } else {\u000a                        patch.push(["set", p.join("."), n]);\u000a                    }\u000a                });\u000a\u000a                log.info("Loaded json from YAML:", patch);\u000a                if (self._validateYamlPatch(patch)) {\u000a                    self.patchJson(patch);\u000a                    self.invalidInput(false);\u000a                    return true;\u000a                }\u000a            } catch (e2) {\u000a            }\u000a\u000a            return false;\u000a        };\u000a\u000a        self._validateYamlPatch = function(patch) {\u000a            if (!_.isArray(patch)) {\u000a                return false;\u000a            }\u000a\u000a            return _.every(patch, function(p) {\u000a                if (!_.isArray(p) || p.length != 3) {\u000a                    return false;\u000a                }\u000a\u000a                if (!_.isString(p[0])) {\u000a                    return false;\u000a                }\u000a\u000a                if (!_.isString(p[1]) && !_.isArray(p[1])) {\u000a                    return false;\u000a                }\u000a\u000a                if (p[0] == "merge" && !(_.isArray(p[2]) || _.isPlainObject(p[2]) || _.isString(p[2]))) {\u000a                    return false;\u000a                }\u000a\u000a                return true;\u000a            });\u000a        };\u000a\u000a        self.preview = function() {\u000a            var patch = self.patchJson();\u000a            if (!self.patchJson()) {\u000a                return;\u000a            }\u000a\u000a            self.previewing(true);\u000a            $.ajax({\u000a                url: API_BASEURL + "plugin/yamlpatcher",\u000a                type: "POST",\u000a                dataType: "json",\u000a                data: JSON.stringify({\u000a                    command: "preview",\u000a                    target: "settings",\u000a                    patch: patch\u000a                }),\u000a                contentType: "application/json; charset=UTF-8",\u000a                success: function(response) {\u000a                    self.previewing(false);\u000a\u000a                    var contextSize = 3;\u000a                    var diff = JsDiff.diffLines(response.old, response.new);\u000a\u000a                    self.diff.removeAll();\u000a\u000a                    if (diff.length <= 1) {\u000a                        // no changes\u000a                        self.diff.push({text: "No changes!", css: "separator"});\u000a                        return;\u000a                    }\u000a\u000a                    self.toBeApplied(patch);\u000a\u000a                    var unchanged = "";\u000a                    var beginning = true;\u000a                    var context, before, after, hidden;\u000a\u000a                    _.each(diff, function(part) {\u000a                        if (!part.added && !part.removed) {\u000a                            unchanged += part.value;\u000a                        } else {\u000a                            if (unchanged) {\u000a                                context = unchanged.split("\u005cn");\u000a\u000a                                if (context.length > contextSize * 2) {\u000a                                    before = context.slice(0, contextSize);\u000a                                    after = context.slice(-contextSize - 1);\u000a\u000a                                    if (!beginning) {\u000a                                        hidden = context.length - 2 * contextSize;\u000a                                        self.diff.push({text: before.join("\u005cn"), css: "unchanged"});\u000a                                        self.diff.push({text: "\u005cn[... " + hidden + " lines ...]\u005cn", css: "separator"});\u000a                                    } else {\u000a                                        hidden = context.length - contextSize;\u000a                                        self.diff.push({text: "[... " + hidden + " lines ...]\u005cn", css: "separator"});\u000a                                    }\u000a                                    self.diff.push({text: after.join("\u005cn"), css: "unchanged"});\u000a                                } else {\u000a                                    self.diff.push({text: context.join("\u005cn"), css: "unchanged"})\u000a                                }\u000a                                unchanged = "";\u000a                                beginning = false;\u000a                            }\u000a\u000a                            var css = part.added ? "added" : "removed";\u000a                            self.diff.push({text: part.value, css: css});\u000a                        }\u000a                    });\u000a\u000a                    if (unchanged) {\u000a                        context = unchanged.split("\u005cn");\u000a\u000a                        if (context.length > contextSize) {\u000a                            hidden = context.length - contextSize;\u000a                            context = context.slice(0, contextSize);\u000a                            self.diff.push({text: context.join("\u005cn"), css: "unchanged"});\u000a                            self.diff.push({text: "\u005cn[... " + hidden + " lines ...]", css: "separator"});\u000a                        } else {\u000a                            self.diff.push({text: context.join("\u005cn"), css: "unchanged"});\u000a                        }\u000a                    }\u000a                },\u000a                error: function(xhr) {\u000a                    self.previewing(false);\u000a                    var html = gettext("The patch could not be previewed.");\u000a                    html += pnotifyAdditionalInfo('<pre style="overflow: auto">' + xhr.responseText + '</pre>');\u000a                    new PNotify({\u000a                        title: gettext("Preview failed"),\u000a                        text: html,\u000a                        type: "error"\u000a                    })\u000a                }\u000a            })\u000a        };\u000a\u000a        self.apply = function() {\u000a            if (!self.toBeApplied()) {\u000a                return;\u000a            }\u000a\u000a            self.applying(true);\u000a            $.ajax({\u000a                url: API_BASEURL + "plugin/yamlpatcher",\u000a                type: "POST",\u000a                dataType: "json",\u000a                data: JSON.stringify({\u000a                    command: "apply",\u000a                    target: "settings",\u000a                    patch: self.toBeApplied()\u000a                }),\u000a                contentType: "application/json; charset=UTF-8",\u000a                success: function() {\u000a                    if (!self.settingsViewModel.hasOwnProperty("onEventSettingsUpdated")) {\u000a                        self.settingsViewModel.requestData();\u000a                    }\u000a                    self._applied();\u000a                },\u000a                error: function(xhr) {\u000a                    self.applying(false);\u000a                    var html = gettext("The patch could not be applied successfully.");\u000a                    html += pnotifyAdditionalInfo('<pre style="overflow: auto">' + xhr.responseText + '</pre>');\u000a                    new PNotify({\u000a                        title: gettext("Patch failed"),\u000a                        text: html,\u000a                        type: "error"\u000a                    })\u000a                }\u000a            });\u000a        };\u000a\u000a        self._applied = function() {\u000a            self.applying(false);\u000a            self.patch("");\u000a            self.diff.removeAll();\u000a            self.toBeApplied(undefined);\u000a        };\u000a\u000a        self.onStartup = function() {\u000a            self.diffView = $("#settings_plugin_yamlpatcher_diffView");\u000a        };\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push([\u000a        YamlPatcherViewModel,\u000a        ["settingsViewModel"],\u000a        "#settings_plugin_yamlpatcher"\u000a    ]);\u000a});\u000a\u000a;\u000a
p0
.