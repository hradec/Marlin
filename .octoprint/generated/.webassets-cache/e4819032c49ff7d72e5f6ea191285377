V$(function() {\u000a    function GcodeViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.loginState = parameters[0];\u000a        self.settings = parameters[1];\u000a\u000a        // TODO remove with release of 1.3.0 and switch to OctoPrint.coreui usage\u000a        self.tabTracking = parameters[2];\u000a\u000a        self.ui_progress_percentage = ko.observable();\u000a        self.ui_progress_type = ko.observable();\u000a        self.ui_progress_text = ko.pureComputed(function() {\u000a            var text = "";\u000a            switch (self.ui_progress_type()) {\u000a                case "loading": {\u000a                    text = gettext("Loading...") + " (" + self.ui_progress_percentage().toFixed(0) + "%)";\u000a                    break;\u000a                }\u000a                case "analyzing": {\u000a                    text = gettext("Analyzing...") + " (" + self.ui_progress_percentage().toFixed(0) + "%)";\u000a                    break;\u000a                }\u000a                case "done": {\u000a                    text = gettext("Analyzed");\u000a                    break;\u000a                }\u000a            }\u000a\u000a            return text;\u000a        });\u000a        self.ui_modelInfo = ko.observable("");\u000a        self.ui_layerInfo = ko.observable("");\u000a\u000a        self.enableReload = ko.observable(false);\u000a\u000a        self.waitForApproval = ko.observable(false);\u000a        self.selectedFile = {\u000a            name: ko.observable(undefined),\u000a            date: ko.observable(undefined),\u000a            size: ko.observable(undefined)\u000a        };\u000a\u000a        self.renderer_centerModel = ko.observable(false);\u000a        self.renderer_centerViewport = ko.observable(false);\u000a        self.renderer_zoomOnModel = ko.observable(false);\u000a        self.renderer_showMoves = ko.observable(true);\u000a        self.renderer_showRetracts = ko.observable(true);\u000a        self.renderer_extrusionWidthEnabled = ko.observable(false);\u000a        self.renderer_extrusionWidth = ko.observable(2);\u000a        self.renderer_showNext = ko.observable(false);\u000a        self.renderer_showPrevious = ko.observable(false);\u000a        self.renderer_syncProgress = ko.observable(true);\u000a\u000a        self.reader_sortLayers = ko.observable(true);\u000a        self.reader_hideEmptyLayers = ko.observable(true);\u000a\u000a        self.synchronizeOptions = function(additionalRendererOptions, additionalReaderOptions) {\u000a            var renderer = {\u000a                moveModel: self.renderer_centerModel(),\u000a                centerViewport: self.renderer_centerViewport(),\u000a                showMoves: self.renderer_showMoves(),\u000a                showRetracts: self.renderer_showRetracts(),\u000a                extrusionWidth: self.renderer_extrusionWidthEnabled() ? self.renderer_extrusionWidth() : 1,\u000a                showNextLayer: self.renderer_showNext(),\u000a                showPreviousLayer: self.renderer_showPrevious(),\u000a                zoomInOnModel: self.renderer_zoomOnModel(),\u000a                onInternalOptionChange: self._onInternalRendererOptionChange\u000a            };\u000a            if (additionalRendererOptions) {\u000a                _.extend(renderer, additionalRendererOptions);\u000a            }\u000a\u000a            var reader = {\u000a                sortLayers: self.reader_sortLayers(),\u000a                purgeEmptyLayers: self.reader_hideEmptyLayers()\u000a            };\u000a            if (additionalReaderOptions) {\u000a                _.extend(reader, additionalReaderOptions);\u000a            }\u000a\u000a            GCODE.ui.updateOptions({\u000a                renderer: renderer,\u000a                reader: reader\u000a            });\u000a        };\u000a\u000a        // subscribe to update Gcode view on updates...\u000a        self.renderer_centerModel.subscribe(self.synchronizeOptions);\u000a        self.renderer_centerViewport.subscribe(self.synchronizeOptions);\u000a        self.renderer_zoomOnModel.subscribe(self.synchronizeOptions);\u000a        self.renderer_showMoves.subscribe(self.synchronizeOptions);\u000a        self.renderer_showRetracts.subscribe(self.synchronizeOptions);\u000a        self.renderer_extrusionWidthEnabled.subscribe(self.synchronizeOptions);\u000a        self.renderer_extrusionWidth.subscribe(self.synchronizeOptions);\u000a        self.renderer_showNext.subscribe(self.synchronizeOptions);\u000a        self.renderer_showPrevious.subscribe(self.synchronizeOptions);\u000a        self.reader_sortLayers.subscribe(self.synchronizeOptions);\u000a        self.reader_hideEmptyLayers.subscribe(self.synchronizeOptions);\u000a\u000a        // subscribe to relevant printer settings...\u000a        self.settings.printerProfiles.currentProfileData.subscribe(function() {\u000a            if (!self.enabled) return;\u000a\u000a            var currentProfileData = self.settings.printerProfiles.currentProfileData();\u000a            if (!currentProfileData) return;\u000a\u000a            var toolOffsets = self._retrieveToolOffsets(currentProfileData);\u000a            if (toolOffsets) {\u000a                GCODE.ui.updateOptions({\u000a                    reader: {\u000a                        toolOffsets: toolOffsets\u000a                    }\u000a                });\u000a\u000a            }\u000a\u000a            var bedDimensions = self._retrieveBedDimensions(currentProfileData);\u000a            if (toolOffsets) {\u000a                GCODE.ui.updateOptions({\u000a                    renderer: {\u000a                        bed: bedDimensions\u000a                    }\u000a                });\u000a            }\u000a\u000a            var axesConfiguration = self._retrieveAxesConfiguration(currentProfileData);\u000a            if (axesConfiguration) {\u000a                GCODE.ui.updateOptions({\u000a                    renderer: {\u000a                        invertAxes: axesConfiguration\u000a                    }\u000a                });\u000a            }\u000a        });\u000a\u000a        self._retrieveBedDimensions = function(currentProfileData) {\u000a            if (currentProfileData == undefined) {\u000a                currentProfileData = self.settings.printerProfiles.currentProfileData();\u000a            }\u000a\u000a            if (currentProfileData && currentProfileData.volume && currentProfileData.volume.formFactor() && currentProfileData.volume.width() && currentProfileData.volume.depth()) {\u000a                var x = undefined, y = undefined, r = undefined, circular = false, centeredOrigin = false;\u000a\u000a                var formFactor = currentProfileData.volume.formFactor();\u000a                if (formFactor == "circular") {\u000a                    r = currentProfileData.volume.width() / 2;\u000a                    circular = true;\u000a                    centeredOrigin = true;\u000a                } else {\u000a                    x = currentProfileData.volume.width();\u000a                    y = currentProfileData.volume.depth();\u000a                    if (currentProfileData.volume.origin) {\u000a                        centeredOrigin = currentProfileData.volume.origin() == "center";\u000a                    }\u000a                }\u000a\u000a                return {\u000a                    x: x,\u000a                    y: y,\u000a                    r: r,\u000a                    circular: circular,\u000a                    centeredOrigin: centeredOrigin\u000a                };\u000a            } else {\u000a                return undefined;\u000a            }\u000a        };\u000a\u000a        self._retrieveToolOffsets = function(currentProfileData) {\u000a            if (currentProfileData == undefined) {\u000a                currentProfileData = self.settings.printerProfiles.currentProfileData();\u000a            }\u000a\u000a            if (currentProfileData && currentProfileData.extruder && currentProfileData.extruder.offsets()) {\u000a                var offsets = [];\u000a                _.each(currentProfileData.extruder.offsets(), function(offset) {\u000a                    offsets.push({x: offset[0], y: offset[1]})\u000a                });\u000a                return offsets;\u000a            } else {\u000a                return undefined;\u000a            }\u000a\u000a        };\u000a\u000a        self._retrieveAxesConfiguration = function(currentProfileData) {\u000a            if (currentProfileData == undefined) {\u000a                currentProfileData = self.settings.printerProfiles.currentProfileData();\u000a            }\u000a\u000a            if (currentProfileData && currentProfileData.axes) {\u000a                var invertX = false, invertY = false;\u000a                if (currentProfileData.axes.x) {\u000a                    invertX = currentProfileData.axes.x.inverted();\u000a                }\u000a                if (currentProfileData.axes.y) {\u000a                    invertY = currentProfileData.axes.y.inverted();\u000a                }\u000a\u000a                return {\u000a                    x: invertX,\u000a                    y: invertY\u000a                }\u000a            } else {\u000a                return undefined;\u000a            }\u000a        };\u000a\u000a        self.loadedFilename = undefined;\u000a        self.loadedFileDate = undefined;\u000a        self.status = 'idle';\u000a        self.enabled = false;\u000a\u000a        self.currentlyPrinting = false;\u000a\u000a        self.errorCount = 0;\u000a\u000a        self.layerSlider = undefined;\u000a        self.layerCommandSlider = undefined;\u000a\u000a        self.currentLayer = undefined;\u000a        self.currentCommand = undefined;\u000a\u000a        self.initialize = function() {\u000a            var layerSliderElement = $("#gcode_slider_layers");\u000a            var commandSliderElement = $("#gcode_slider_commands");\u000a            var containerElement = $("#gcode_canvas");\u000a\u000a            if (!(layerSliderElement.length && commandSliderElement.length && containerElement.length)) {\u000a                return;\u000a            }\u000a\u000a            self._configureLayerSlider(layerSliderElement);\u000a            self._configureLayerCommandSlider(commandSliderElement);\u000a\u000a            self.settings.requestData(function() {\u000a                var initResult = GCODE.ui.init({\u000a                    container: "#gcode_canvas",\u000a                    onProgress: self._onProgress,\u000a                    onModelLoaded: self._onModelLoaded,\u000a                    onLayerSelected: self._onLayerSelected,\u000a                    bed: self._retrieveBedDimensions(),\u000a                    toolOffsets: self._retrieveToolOffsets(),\u000a                    invertAxes: self._retrieveAxesConfiguration()\u000a                });\u000a\u000a                if (!initResult) {\u000a                    log.info("Could not initialize GCODE viewer component");\u000a                    return;\u000a                }\u000a\u000a                self.synchronizeOptions();\u000a                self.enabled = true;\u000a            });\u000a        };\u000a\u000a        self.reset = function() {\u000a            self.enableReload(false);\u000a            self.loadedFilename = undefined;\u000a            self.loadedFileDate = undefined;\u000a            self.clear();\u000a        };\u000a\u000a        self.clear = function() {\u000a            GCODE.ui.clear();\u000a        };\u000a\u000a        self._configureLayerSlider = function(layerSliderElement) {\u000a            self.layerSlider = layerSliderElement.slider({\u000a                id: "gcode_layer_slider",\u000a                reversed: true,\u000a                selection: "after",\u000a                orientation: "vertical",\u000a                min: 0,\u000a                max: 1,\u000a                step: 1,\u000a                value: 0,\u000a                enabled: false,\u000a                formatter: function(value) { return "Layer #" + (value + 1); }\u000a            }).on("slide", self.changeLayer);\u000a        };\u000a\u000a        self._configureLayerCommandSlider = function(commandSliderElement) {\u000a            self.layerCommandSlider = commandSliderElement.slider({\u000a                id: "gcode_command_slider",\u000a                orientation: "horizontal",\u000a                min: 0,\u000a                max: 1,\u000a                step: 1,\u000a                value: [0, 1],\u000a                enabled: false,\u000a                tooltip: "hide"\u000a            }).on("slide", self.changeCommandRange);\u000a        };\u000a\u000a        self.loadFile = function(filename, date){\u000a            self.enableReload(false);\u000a            if (self.status == "idle" && self.errorCount < 3) {\u000a                self.status = "request";\u000a                $.ajax({\u000a                    url: BASEURL + "downloads/files/local/" + filename,\u000a                    data: { "ctime": date },\u000a                    type: "GET",\u000a                    success: function(response, rstatus) {\u000a                        if(rstatus === 'success'){\u000a                            self.showGCodeViewer(response, rstatus);\u000a                            self.loadedFilename = filename;\u000a                            self.loadedFileDate = date;\u000a                            self.status = "idle";\u000a                            self.enableReload(true);\u000a                        }\u000a                    },\u000a                    error: function() {\u000a                        self.status = "idle";\u000a                        self.errorCount++;\u000a                    }\u000a                });\u000a            }\u000a        };\u000a\u000a        self.showGCodeViewer = function(response, rstatus) {\u000a            var par = {\u000a                target: {\u000a                    result: response\u000a                }\u000a            };\u000a            GCODE.gCodeReader.loadFile(par);\u000a\u000a            if (self.layerSlider != undefined) {\u000a                self.layerSlider.slider("disable");\u000a            }\u000a            if (self.layerCommandSlider != undefined) {\u000a                self.layerCommandSlider.slider("disable");\u000a            }\u000a        };\u000a\u000a        self.reload = function() {\u000a            if (!self.enableReload()) return;\u000a            self.loadFile(self.loadedFilename, self.loadedFileDate);\u000a        };\u000a\u000a        self.fromHistoryData = function(data) {\u000a            self._processData(data);\u000a        };\u000a\u000a        self.fromCurrentData = function(data) {\u000a            self._processData(data);\u000a        };\u000a\u000a        self._renderPercentage = function(percentage) {\u000a            var cmdIndex = GCODE.gCodeReader.getCmdIndexForPercentage(percentage);\u000a            if (!cmdIndex) return;\u000a\u000a            GCODE.renderer.render(cmdIndex.layer, 0, cmdIndex.cmd);\u000a            GCODE.ui.updateLayerInfo(cmdIndex.layer);\u000a\u000a            if (self.layerSlider != undefined) {\u000a                self.layerSlider.slider("setValue", cmdIndex.layer);\u000a            }\u000a            if (self.layerCommandSlider != undefined) {\u000a                self.layerCommandSlider.slider("setValue", [0, cmdIndex.cmd]);\u000a            }\u000a        };\u000a\u000a        self._processData = function(data) {\u000a            if (!data.job.file || !data.job.file.name && (self.loadedFilename || self.loadedFileDate)) {\u000a                self.waitForApproval(false);\u000a\u000a                self.loadedFilename = undefined;\u000a                self.loadedFileDate = undefined;\u000a                self.selectedFile.name(undefined);\u000a                self.selectedFile.date(undefined);\u000a                self.selectedFile.size(undefined);\u000a\u000a                self.clear();\u000a                return;\u000a            }\u000a            if (!self.enabled) return;\u000a            self.currentlyPrinting = data.state.flags && (data.state.flags.printing || data.state.flags.paused);\u000a\u000a            if(self.loadedFilename\u000a                    && self.loadedFilename == data.job.file.name\u000a                    && self.loadedFileDate == data.job.file.date) {\u000a                if (self.tabTracking.browserTabVisible && self.tabActive && self.currentlyPrinting && self.renderer_syncProgress() && !self.waitForApproval()) {\u000a                    self._renderPercentage(data.progress.completion);\u000a                }\u000a                self.errorCount = 0\u000a            } else {\u000a                self.clear();\u000a                if (data.job.file.name && data.job.file.origin != "sdcard"\u000a                        && self.status != "request"\u000a                        && (!self.waitForApproval() || self.selectedFile.name() != data.job.file.name || self.selectedFile.date() != data.job.file.date)) {\u000a                    self.selectedFile.name(data.job.file.name);\u000a                    self.selectedFile.date(data.job.file.date);\u000a                    self.selectedFile.size(data.job.file.size);\u000a\u000a                    if (data.job.file.size > CONFIG_GCODE_SIZE_THRESHOLD || ($.browser.mobile && data.job.file.size > CONFIG_GCODE_MOBILE_SIZE_THRESHOLD)) {\u000a                        self.waitForApproval(true);\u000a                        self.loadedFilename = undefined;\u000a                        self.loadedFileDate = undefined;\u000a                    } else {\u000a                        self.waitForApproval(false);\u000a                        self.loadFile(data.job.file.name, data.job.file.date);\u000a                    }\u000a                }\u000a            }\u000a        };\u000a\u000a        self.onEventPrintDone = function() {\u000a            if (self.renderer_syncProgress() && !self.waitForApproval()) {\u000a                self._renderPercentage(100.0);\u000a            }\u000a        };\u000a\u000a        self.approveLargeFile = function() {\u000a            self.waitForApproval(false);\u000a            self.loadFile(self.selectedFile.name(), self.selectedFile.date());\u000a        };\u000a\u000a        self._onProgress = function(type, percentage) {\u000a            self.ui_progress_type(type);\u000a            self.ui_progress_percentage(percentage);\u000a        };\u000a\u000a        self._onModelLoaded = function(model) {\u000a            if (!model) {\u000a                self.ui_modelInfo("");\u000a                if (self.layerSlider != undefined) {\u000a                    self.layerSlider.slider("disable");\u000a                    self.layerSlider.slider("setMax", 1);\u000a                    self.layerSlider.slider("setValue", 0);\u000a                }\u000a                self.currentLayer = 0;\u000a            } else {\u000a                var output = [];\u000a                output.push(gettext("Model size") + ": " + model.width.toFixed(2) + "mm &times; " + model.depth.toFixed(2) + "mm &times; " + model.height.toFixed(2) + "mm");\u000a                output.push(gettext("Estimated total print time") + ": " + formatFuzzyEstimation(model.printTime));\u000a                output.push(gettext("Estimated layer height") + ": " + model.layerHeight.toFixed(2) + gettext("mm"));\u000a                output.push(gettext("Layer count") + ": " + model.layersPrinted.toFixed(0) + " " + gettext("printed") + ", " + model.layersTotal.toFixed(0) + " " + gettext("visited"));\u000a\u000a                self.ui_modelInfo(output.join("<br>"));\u000a\u000a                if (self.layerSlider != undefined) {\u000a                    self.layerSlider.slider("enable");\u000a                    self.layerSlider.slider("setMax", model.layersPrinted - 1);\u000a                    self.layerSlider.slider("setValue", 0);\u000a                }\u000a            }\u000a        };\u000a\u000a        self._onLayerSelected = function(layer) {\u000a            if (!layer) {\u000a                self.ui_layerInfo("");\u000a                if (self.layerCommandSlider != undefined) {\u000a                    self.layerCommandSlider.slider("disable");\u000a                    self.layerCommandSlider.slider("setMax", 1);\u000a                    self.layerCommandSlider.slider("setValue", [0, 1]);\u000a                }\u000a                self.currentCommand = [0, 1];\u000a            } else {\u000a                var output = [];\u000a                output.push(gettext("Layer number") + ": " + (layer.number + 1));\u000a                output.push(gettext("Layer height") + " (mm): " + layer.height);\u000a                output.push(gettext("GCODE commands in layer") + ": " + layer.commands);\u000a                if (layer.filament != undefined) {\u000a                    if (layer.filament.length == 1) {\u000a                        output.push(gettext("Filament used by layer") + ": " + layer.filament[0].toFixed(2) + "mm");\u000a                    } else {\u000a                        for (var i = 0; i < layer.filament.length; i++) {\u000a                            output.push(gettext("Filament used by layer") + " (" + gettext("Tool") + " " + i + "): " + layer.filament[i].toFixed(2) + "mm");\u000a                        }\u000a                    }\u000a                }\u000a                output.push(gettext("Print time for layer") + ": " + formatFuzzyEstimation(layer.printTime));\u000a\u000a                self.ui_layerInfo(output.join("<br>"));\u000a\u000a                if (self.layerCommandSlider != undefined) {\u000a                    self.layerCommandSlider.slider("enable");\u000a                    self.layerCommandSlider.slider("setMax", layer.commands - 1);\u000a                    self.layerCommandSlider.slider("setValue", [0, layer.commands - 1]);\u000a                }\u000a            }\u000a        };\u000a\u000a        self._onInternalRendererOptionChange = function(options) {\u000a            if (!options) return;\u000a\u000a            for (var opt in options) {\u000a                if (opt == "zoomInOnModel" && options[opt] != self.renderer_zoomOnModel()) {\u000a                    self.renderer_zoomOnModel(false);\u000a                } else if (opt == "centerViewport" && options[opt] != self.renderer_centerViewport()) {\u000a                    self.renderer_centerViewport(false);\u000a                } else if (opt == "moveModel" && options[opt] != self.renderer_centerModel()) {\u000a                    self.renderer_centerModel(false);\u000a                }\u000a            }\u000a        };\u000a\u000a        self.changeLayer = function(event) {\u000a            if (self.currentlyPrinting && self.renderer_syncProgress()) self.renderer_syncProgress(false);\u000a\u000a            var value = event.value;\u000a            if (self.currentLayer !== undefined && self.currentLayer == value) return;\u000a            self.currentLayer = value;\u000a\u000a            GCODE.ui.changeSelectedLayer(value);\u000a        };\u000a\u000a        self.changeCommandRange = function(event) {\u000a            if (self.currentlyPrinting && self.renderer_syncProgress()) self.renderer_syncProgress(false);\u000a\u000a            var tuple = event.value;\u000a            if (self.currentCommand !== undefined && self.currentCommand[0] == tuple[0] && self.currentCommand[1] == tuple[1]) return;\u000a            self.currentCommand = tuple;\u000a\u000a            GCODE.ui.changeSelectedCommands(self.layerSlider.slider("getValue"), tuple[0], tuple[1]);\u000a        };\u000a\u000a        self.onDataUpdaterReconnect = function() {\u000a            self.reset();\u000a        };\u000a\u000a        self.onBeforeBinding = function() {\u000a            self.initialize();\u000a        };\u000a\u000a        self.onTabChange = function(current, previous) {\u000a            self.tabActive = current == "#gcode";\u000a        };\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push([\u000a        GcodeViewModel,\u000a        ["loginStateViewModel", "settingsViewModel", "tabTracking"],\u000a        "#gcode"\u000a    ]);\u000a});\u000a\u000a;\u000a
p0
.