V\ufeff$(function() {\u000a    function SystemCommandEditorViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.settingsViewModel = parameters[0];\u000a        self.systemCommandEditorDialogViewModel = parameters[1];\u000a\u000a        self.actionsFromServer = [];\u000a        self.systemActions = ko.observableArray([]);\u000a\u000a        self.popup = undefined;\u000a\u000a        self.dividerID = 0;\u000a\u000a        self.onSettingsShown = function () {\u000a            self.requestData();\u000a        };\u000a\u000a        self.requestData = function () {\u000a            $.ajax({\u000a                url: API_BASEURL + "settings",\u000a                type: "GET",\u000a                dataType: "json",\u000a                success: function(response) {\u000a                    self.fromResponse(response);\u000a                }\u000a            });\u000a        };\u000a\u000a        self.fromResponse = function (response) {\u000a            self.actionsFromServer = response.system.actions || [];\u000a            self.rerenderActions();\u000a\u000a            $("#systemActions").sortable({\u000a                items: '> li:not(.static)',\u000a                cursor: 'move',\u000a                update: function(event, ui) {\u000a                    var data = ko.dataFor(ui.item[0]);\u000a                    var item = _.find(self.actionsFromServer, function(e) {\u000a                        return e.action == data.action();\u000a                    });\u000a\u000a                    var position = ko.utils.arrayIndexOf(ui.item.parent().children(), ui.item[0]) - 1;\u000a                    if (position >= 0) {\u000a                        self.actionsFromServer = _.without(self.actionsFromServer, item);\u000a                        self.actionsFromServer.splice(position, 0, item);\u000a                    }\u000a                    ui.item.remove();\u000a                    self.rerenderActions();\u000a                },\u000a                start: function(){\u000a                    $('.static', this).each(function(){\u000a                        var $this = $(this);\u000a                        $this.data('pos', $this.index());\u000a                    });\u000a                },\u000a                change: function(){\u000a                    $sortable = $(this);\u000a                    $statics = $('.static', this).detach();\u000a                    $helper = $('<li></li>').prependTo(this);\u000a                    $statics.each(function(){\u000a                        var $this = $(this);\u000a                        var target = $this.data('pos');\u000a\u000a                        $this.insertAfter($('li', $sortable).eq(target));\u000a                    });\u000a                    $helper.remove();\u000a                }\u000a            });\u000a        };\u000a\u000a        self.rerenderActions = function() {\u000a            self.dividerID = 0;\u000a\u000a            var array = []\u000a            _.each(self.actionsFromServer, function(e) {\u000a                var element = {};\u000a\u000a                if (!e.action.startsWith("divider")) {\u000a                    element = _.extend(element, {\u000a                        name: ko.observable(e.name),\u000a                        action: ko.observable(e.action),\u000a                        command: ko.observable(e.command)\u000a                    });\u000a\u000a                    if (e.hasOwnProperty("confirm"))\u000a                        element.confirm = ko.observable(e.confirm);\u000a                }\u000a                else\u000a                {\u000a                    e.action = "divider" + (++self.dividerID);\u000a                    element.action = ko.observable(e.action);\u000a                }\u000a                array.push(element);\u000a            })\u000a            self.systemActions(array);\u000a        }\u000a\u000a        self._showPopup = function (options, eventListeners) {\u000a            if (self.popup !== undefined) {\u000a                self.popup.remove();\u000a            }\u000a            self.popup = new PNotify(options);\u000a\u000a            if (eventListeners) {\u000a                var popupObj = self.popup.get();\u000a                _.each(eventListeners, function (value, key) {\u000a                    popupObj.on(key, value);\u000a                })\u000a            }\u000a        };\u000a\u000a        self.createElement = function (invokedOn, contextParent, selectedMenu) {\u000a            self.systemCommandEditorDialogViewModel.reset();\u000a            self.systemCommandEditorDialogViewModel.title(gettext("Create Command"));\u000a\u000a            self.systemCommandEditorDialogViewModel.show(function (ret) {\u000a                self.actionsFromServer.push(ret);\u000a                self.rerenderActions();\u000a            });\u000a        }\u000a        self.deleteElement = function (invokedOn, contextParent, selectedMenu) {\u000a            var elementID = contextParent.attr('id');\u000a            var element = _.find(self.actionsFromServer, function(e) {\u000a                return e.action == elementID;\u000a            });\u000a            if (element == undefined) {\u000a                self._showPopup({\u000a                    title: gettext("Something went wrong while creating the new Element"),\u000a                    type: "error"\u000a                });\u000a                return;\u000a            }\u000a\u000a            showConfirmationDialog("", function (e) {\u000a                self.actionsFromServer = _.without(self.actionsFromServer, element);\u000a                self.rerenderActions();\u000a            });\u000a        }\u000a        self.editElement = function (invokedOn, contextParent, selectedMenu) {\u000a            var elementID = contextParent.attr('id');\u000a            var element = self.element = _.find(self.actionsFromServer, function(e) {\u000a                return e.action == elementID;\u000a            });\u000a            if (element == undefined) {\u000a                self._showPopup({\u000a                    title: gettext("Something went wrong while creating the new Element"),\u000a                    type: "error"\u000a                });\u000a                return;\u000a            }\u000a\u000a            var data = ko.mapping.toJS(element);\u000a\u000a            self.systemCommandEditorDialogViewModel.reset(data);\u000a            self.systemCommandEditorDialogViewModel.title(gettext("Edit Command"));\u000a\u000a            self.systemCommandEditorDialogViewModel.show(function (ret) {\u000a                var element = self.element;\u000a\u000a                element.name = ret.name;\u000a                element.action = ret.action;\u000a                element.command = ret.command;\u000a\u000a                if (ret.hasOwnProperty("confirm"))\u000a                    element.confirm = ret.confirm;\u000a                else\u000a                    delete element.confirm;\u000a\u000a                self.rerenderActions();\u000a            });\u000a        }\u000a\u000a        self.systemContextMenu = function (invokedOn, contextParent, selectedMenu) {\u000a            switch (selectedMenu.attr('cmd')) {\u000a                case "editCommand": {\u000a                    self.editElement(invokedOn, contextParent, selectedMenu);\u000a                    break;\u000a                }\u000a                case "deleteCommand": {\u000a                    self.deleteElement(invokedOn, contextParent, selectedMenu);\u000a                    break;\u000a                }\u000a                case "createCommand": {\u000a                    self.createElement(invokedOn, contextParent, selectedMenu);\u000a                    break;\u000a                }\u000a                case "createDivider": {\u000a                    self.actionsFromServer.push({ action: "divider" });\u000a                    self.rerenderActions();\u000a                    break;\u000a                }\u000a            }\u000a        }\u000a\u000a        self.onBeforeBinding = function () {\u000a            self.settings = self.settingsViewModel.settings;\u000a        }\u000a\u000a        self.onSettingsBeforeSave = function () {\u000a            _.each(self.actionsFromServer, function(e) {\u000a                if (e.action.startsWith("divider")) {\u000a                    e.action = "divider";\u000a                }\u000a            });\u000a            self.settingsViewModel.system_actions(self.actionsFromServer);\u000a        }\u000a\u000a        self.onEventSettingsUpdated = function (payload) {\u000a            self.requestData();\u000a        }\u000a    }\u000a\u000a    // view model class, parameters for constructor, container to bind to\u000a    OCTOPRINT_VIEWMODELS.push([\u000a        SystemCommandEditorViewModel,\u000a        ["settingsViewModel", "systemCommandEditorDialogViewModel"],\u000a        ["#settings_plugin_systemcommandeditor"]\u000a    ]);\u000a});\u000a;\u000a
p0
.