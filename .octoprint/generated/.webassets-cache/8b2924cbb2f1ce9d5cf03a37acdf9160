V// source: plugin/corewizard/js/corewizard.js\u000a$(function() {\u000a    function CoreWizardAclViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.loginStateViewModel = parameters[0];\u000a\u000a        self.username = ko.observable(undefined);\u000a        self.password = ko.observable(undefined);\u000a        self.confirmedPassword = ko.observable(undefined);\u000a\u000a        self.setup = ko.observable(false);\u000a        self.decision = ko.observable();\u000a\u000a        self.required = false;\u000a\u000a        self.passwordMismatch = ko.pureComputed(function() {\u000a            return self.password() != self.confirmedPassword();\u000a        });\u000a\u000a        self.validUsername = ko.pureComputed(function() {\u000a            return self.username() && self.username().trim() != "";\u000a        });\u000a\u000a        self.validPassword = ko.pureComputed(function() {\u000a            return self.password() && self.password().trim() != "";\u000a        });\u000a\u000a        self.validData = ko.pureComputed(function() {\u000a            return !self.passwordMismatch() && self.validUsername() && self.validPassword();\u000a        });\u000a\u000a        self.keepAccessControl = function() {\u000a            if (!self.validData()) return;\u000a\u000a            var data = {\u000a                "ac": true,\u000a                "user": self.username(),\u000a                "pass1": self.password(),\u000a                "pass2": self.confirmedPassword()\u000a            };\u000a            self._sendData(data);\u000a        };\u000a\u000a        self.disableAccessControl = function() {\u000a            var message = gettext("If you disable Access Control <strong>and</strong> your OctoPrint installation is accessible from the internet, your printer <strong>will be accessible by everyone - that also includes the bad guys!</strong>");\u000a            showConfirmationDialog({\u000a                message: message,\u000a                onproceed: function (e) {\u000a                    var data = {\u000a                        "ac": false\u000a                    };\u000a                    self._sendData(data);\u000a                }\u000a            });\u000a        };\u000a\u000a        self._sendData = function(data, callback) {\u000a            OctoPrint.postJson("plugin/corewizard/acl", data)\u000a                .done(function() {\u000a                    self.setup(true);\u000a                    self.decision(data.ac);\u000a                    if (data.ac) {\u000a                        // we now log the user in\u000a                        var user = data.user;\u000a                        var pass = data.pass1;\u000a                        self.loginStateViewModel.login(user, pass, true)\u000a                            .done(function() {\u000a                                if (callback) callback();\u000a                            });\u000a                    } else {\u000a                        if (callback) callback();\u000a                    }\u000a                });\u000a        };\u000a\u000a        self.onBeforeWizardTabChange = function(next, current) {\u000a            if (!self.required) return true;\u000a\u000a            if (!current || !_.startsWith(current, "wizard_plugin_corewizard_acl_") || self.setup()) {\u000a                return true;\u000a            }\u000a            showMessageDialog({\u000a                title: gettext("Please set up Access Control"),\u000a                message: gettext("You haven't yet set up access control. You need to either setup a username and password and click \u005c"Keep Access Control Enabled\u005c" or click \u005c"Disable Access Control\u005c" before continuing")\u000a            });\u000a            return false;\u000a        };\u000a\u000a        self.onWizardDetails = function(response) {\u000a            self.required = response && response.corewizard && response.corewizard.details && response.corewizard.details.acl && response.corewizard.details.acl.required;\u000a        };\u000a\u000a        self.onWizardFinish = function() {\u000a            if (!self.required) return;\u000a\u000a            if (!self.decision()) {\u000a                return "reload";\u000a            }\u000a        };\u000a    }\u000a\u000a    function CoreWizardWebcamViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.settingsViewModel = parameters[0];\u000a\u000a        self.required = false;\u000a\u000a        self.onWizardDetails = function(response) {\u000a            self.required = response && response.corewizard && response.corewizard.details && response.corewizard.details.webcam && response.corewizard.details.webcam.required;\u000a        };\u000a\u000a        self.onWizardFinish = function() {\u000a            if (!self.required) return;\u000a            if (self.settingsViewModel.webcam_streamUrl()\u000a                || (self.settingsViewModel.webcam_snapshotUrl() && self.settingsViewModel.webcam_ffmpegPath())) {\u000a                return "reload";\u000a            }\u000a        }\u000a    }\u000a\u000a    function CoreWizardServerCommandsViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.settingsViewModel = parameters[0];\u000a    }\u000a\u000a    function CoreWizardOnlineCheckViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.settingsViewModel = parameters[0];\u000a\u000a        self.setup = ko.observable(false);\u000a\u000a        self.decision = ko.observable();\u000a        self.required = false;\u000a        self.active = false;\u000a\u000a        self.enableOnlineCheck = function() {\u000a            self.settingsViewModel.server_onlineCheck_enabled(true);\u000a            self.decision(true);\u000a            self._sendData();\u000a        };\u000a\u000a        self.disableOnlineCheck = function() {\u000a            self.settingsViewModel.server_onlineCheck_enabled(false);\u000a            self.decision(false);\u000a            self._sendData();\u000a        };\u000a\u000a        self.onBeforeWizardTabChange = function(next, current) {\u000a            if (!self.required) return true;\u000a\u000a            if (!current || !_.startsWith(current, "wizard_plugin_corewizard_onlinecheck_") || self.setup()) {\u000a                return true;\u000a            }\u000a\u000a            self._showDecisionNeededDialog();\u000a            return false;\u000a        };\u000a\u000a        self.onBeforeWizardFinish = function() {\u000a            if (!self.required) return true;\u000a\u000a            if (self.setup()) {\u000a                return true;\u000a            }\u000a\u000a            self._showDecisionNeededDialog();\u000a            return false;\u000a        };\u000a\u000a        self.onWizardDetails = function(response) {\u000a            self.required = response && response.corewizard && response.corewizard.details && response.corewizard.details.onlinecheck && response.corewizard.details.onlinecheck.required;\u000a        };\u000a\u000a        self._showDecisionNeededDialog = function() {\u000a            showMessageDialog({\u000a                title: gettext("Please set up the online connectivity check"),\u000a                message: gettext("You haven't yet decided on whether to enable or disable the online connectivity check. You need to either enable or disable it before continuing.")\u000a            });\u000a        };\u000a\u000a        self._sendData = function() {\u000a            var data = {\u000a                server: {\u000a                    onlineCheck: {\u000a                        enabled: self.settingsViewModel.server_onlineCheck_enabled(),\u000a                        interval: self.settingsViewModel.server_onlineCheck_interval(),\u000a                        host: self.settingsViewModel.server_onlineCheck_host(),\u000a                        port: self.settingsViewModel.server_onlineCheck_port()\u000a                    }\u000a                }\u000a            };\u000a\u000a            self.active = true;\u000a            self.settingsViewModel.saveData(data)\u000a                .done(function() {\u000a                    self.setup(true);\u000a                    self.active = false;\u000a                });\u000a        };\u000a\u000a    }\u000a\u000a    function CoreWizardPluginBlacklistViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.settingsViewModel = parameters[0];\u000a\u000a        self.setup = ko.observable(false);\u000a\u000a        self.decision = ko.observable();\u000a        self.required = false;\u000a        self.active = false;\u000a\u000a        self.enablePluginBlacklist = function() {\u000a            self.settingsViewModel.server_pluginBlacklist_enabled(true);\u000a            self.decision(true);\u000a            self._sendData();\u000a        };\u000a\u000a        self.disablePluginBlacklist = function() {\u000a            self.settingsViewModel.server_pluginBlacklist_enabled(false);\u000a            self.decision(false);\u000a            self._sendData();\u000a        };\u000a\u000a        self.onBeforeWizardTabChange = function(next, current) {\u000a            if (!self.required) return true;\u000a\u000a            if (!current || !_.startsWith(current, "wizard_plugin_corewizard_pluginblacklist_") || self.setup()) {\u000a                return true;\u000a            }\u000a\u000a            self._showDecisionNeededDialog();\u000a            return false;\u000a        };\u000a\u000a        self.onBeforeWizardFinish = function() {\u000a            if (!self.required) return true;\u000a\u000a            if (self.setup()) {\u000a                return true;\u000a            }\u000a\u000a            self._showDecisionNeededDialog();\u000a            return false;\u000a        };\u000a\u000a        self.onWizardDetails = function(response) {\u000a            self.required = response && response.corewizard && response.corewizard.details && response.corewizard.details.pluginblacklist && response.corewizard.details.pluginblacklist.required;\u000a        };\u000a\u000a        self._showDecisionNeededDialog = function() {\u000a            showMessageDialog({\u000a                title: gettext("Please set up the plugin blacklist processing"),\u000a                message: gettext("You haven't yet decided on whether to enable or disable the plugin blacklist processing. You need to either enable or disable it before continuing.")\u000a            });\u000a        };\u000a\u000a        self._sendData = function() {\u000a            var data = {\u000a                server: {\u000a                    pluginBlacklist: {\u000a                        enabled: self.settingsViewModel.server_pluginBlacklist_enabled()\u000a                    }\u000a                }\u000a            };\u000a\u000a            self.active = true;\u000a            self.settingsViewModel.saveData(data)\u000a                .done(function() {\u000a                    self.setup(true);\u000a                    self.active = false;\u000a                });\u000a        };\u000a\u000a    }\u000a\u000a    function CoreWizardPrinterProfileViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.printerProfiles = parameters[0];\u000a\u000a        self.required = false;\u000a\u000a        self.editor = self.printerProfiles.createProfileEditor();\u000a        self.editorLoaded = ko.observable(false);\u000a\u000a        self.onWizardDetails = function(response) {\u000a            self.required = response && response.corewizard && response.corewizard.details && response.corewizard.details.printerprofile && response.corewizard.details.printerprofile.required;\u000a            if (!self.required) return;\u000a\u000a            OctoPrint.printerprofiles.get("_default")\u000a                .done(function(data) {\u000a                    self.editor.fromProfileData(data);\u000a                    self.editorLoaded(true);\u000a                })\u000a                .fail(function() {\u000a                    self.editor.fromProfileData();\u000a                    self.editorLoaded(true);\u000a                });\u000a        };\u000a\u000a        self.onWizardFinish = function() {\u000a            if (!self.required) return;\u000a\u000a            OctoPrint.printerprofiles.update("_default", self.editor.toProfileData())\u000a                .done(function() {\u000a                    self.printerProfiles.requestData();\u000a                });\u000a        };\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: CoreWizardAclViewModel,\u000a        dependencies: ["loginStateViewModel"],\u000a        elements: ["#wizard_plugin_corewizard_acl"]\u000a    }, {\u000a        construct: CoreWizardWebcamViewModel,\u000a        dependencies: ["settingsViewModel"],\u000a        elements: ["#wizard_plugin_corewizard_webcam"]\u000a    }, {\u000a        construct: CoreWizardServerCommandsViewModel,\u000a        dependencies: ["settingsViewModel"],\u000a        elements: ["#wizard_plugin_corewizard_servercommands"]\u000a    }, {\u000a        construct: CoreWizardOnlineCheckViewModel,\u000a        dependencies: ["settingsViewModel"],\u000a        elements: ["#wizard_plugin_corewizard_onlinecheck"]\u000a    }, {\u000a        construct: CoreWizardPluginBlacklistViewModel,\u000a        dependencies: ["settingsViewModel"],\u000a        elements: ["#wizard_plugin_corewizard_pluginblacklist"]\u000a    }, {\u000a        construct: CoreWizardPrinterProfileViewModel,\u000a        dependencies: ["printerProfilesViewModel"],\u000a        elements: ["#wizard_plugin_corewizard_printerprofile"]\u000a    });\u000a});\u000a\u000a;\u000a
p0
.